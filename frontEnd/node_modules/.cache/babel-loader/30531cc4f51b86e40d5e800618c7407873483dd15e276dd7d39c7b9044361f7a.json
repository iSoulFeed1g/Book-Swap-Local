{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vanja\\\\Desktop\\\\Vanja\\\\GitHub\\\\Book-Swap-Local\\\\frontEnd\\\\src\\\\Pages\\\\Inbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Inbox.css';\nimport Chat from './Chat'; // Import the Chat component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Inbox({\n  user\n}) {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  useEffect(() => {\n    if (user && user.id) {\n      const fetchChats = async () => {\n        try {\n          const response = await axios.get('http://localhost:8081/inbox', {\n            params: {\n              user_id: user.id\n            }\n          });\n          setChats(response.data);\n        } catch (error) {\n          console.error('Error fetching chats:', error);\n        }\n      };\n      fetchChats();\n    }\n  }, [user]);\n  const handleChatClick = chatId => {\n    setSelectedChatId(chatId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inbox-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-item ${chat.id === selectedChatId ? 'selected' : ''}`,\n        onClick: () => handleChatClick(chat.id),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: chat.profilePicture,\n          alt: \"Profile\",\n          className: \"profile-picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: chat.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: chat.latestMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, chat.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: selectedChatId && /*#__PURE__*/_jsxDEV(Chat, {\n        chatId: selectedChatId,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(Inbox, \"4XBatKz2op/I49SyqrZCN6Mg3RU=\");\n_c = Inbox;\nexport default Inbox;\nvar _c;\n$RefreshReg$(_c, \"Inbox\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chat","jsxDEV","_jsxDEV","Inbox","user","_s","chats","setChats","selectedChatId","setSelectedChatId","id","fetchChats","response","get","params","user_id","data","error","console","handleChatClick","chatId","className","children","map","chat","onClick","src","profilePicture","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","latestMessage","_c","$RefreshReg$"],"sources":["C:/Users/Vanja/Desktop/Vanja/GitHub/Book-Swap-Local/frontEnd/src/Pages/Inbox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Inbox.css';\r\nimport Chat from './Chat'; // Import the Chat component\r\n\r\nfunction Inbox({ user }) {\r\n    const [chats, setChats] = useState([]);\r\n    const [selectedChatId, setSelectedChatId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (user && user.id) {\r\n            const fetchChats = async () => {\r\n                try {\r\n                    const response = await axios.get('http://localhost:8081/inbox', {\r\n                        params: { user_id: user.id },\r\n                    });\r\n                    setChats(response.data);\r\n                } catch (error) {\r\n                    console.error('Error fetching chats:', error);\r\n                }\r\n            };\r\n\r\n            fetchChats();\r\n        }\r\n    }, [user]);\r\n\r\n    const handleChatClick = (chatId) => {\r\n        setSelectedChatId(chatId);\r\n    };\r\n\r\n    return (\r\n        <div className=\"inbox-container\">\r\n            <div className=\"chat-list\">\r\n                {chats.map((chat) => (\r\n                    <div\r\n                        key={chat.id}\r\n                        className={`chat-item ${chat.id === selectedChatId ? 'selected' : ''}`}\r\n                        onClick={() => handleChatClick(chat.id)}\r\n                    >\r\n                        <img src={chat.profilePicture} alt=\"Profile\" className=\"profile-picture\" />\r\n                        <div className=\"chat-info\">\r\n                            <h3>{chat.name}</h3>\r\n                            <p>{chat.latestMessage}</p>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-content\">\r\n                {selectedChatId && <Chat chatId={selectedChatId} user={user} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inbox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}